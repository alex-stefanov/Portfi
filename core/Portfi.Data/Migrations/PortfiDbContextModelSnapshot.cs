// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Portfi.Data;

#nullable disable

namespace Portfi.Data.Migrations
{
    [DbContext(typeof(PortfiDbContext))]
    partial class PortfiDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Portfi.Data.Models.Portfolio", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Avatar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "avatar");

                    b.Property<string>("BackgroundTheme")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "background_theme");

                    b.Property<string>("Biography")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "biography");

                    b.Property<string>("CV")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "cv");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "created_on");

                    b.Property<bool>("IsPublic")
                        .HasColumnType("bit")
                        .HasAnnotation("Relational:JsonPropertyName", "is_public");

                    b.Property<int>("Likes")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "likes");

                    b.Property<string>("MainColor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "main_color");

                    b.Property<string>("PersonId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "person_id");

                    b.Property<string>("PersonNames")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "names");

                    b.Property<Guid?>("PortfolioId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Rating")
                        .HasColumnType("float")
                        .HasAnnotation("Relational:JsonPropertyName", "rating");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("Portfolios");

                    b.HasAnnotation("Relational:JsonPropertyName", "portfolio_links");
                });

            modelBuilder.Entity("Portfi.Data.Models.PortfolioDownload", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("DownloaderId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "downloader_id");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "portfolio_id");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioDownloads");

                    b.HasAnnotation("Relational:JsonPropertyName", "downloads");
                });

            modelBuilder.Entity("Portfi.Data.Models.PortfolioLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTimeOffset>("CreationDate")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "creation_date");

                    b.Property<DateTimeOffset>("ExpirationDate")
                        .HasColumnType("datetimeoffset")
                        .HasAnnotation("Relational:JsonPropertyName", "expiration_date");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "portfolio_id");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioLinks");
                });

            modelBuilder.Entity("Portfi.Data.Models.PortfolioView", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<DateTime>("LastOccurredDate")
                        .HasColumnType("datetime2")
                        .HasAnnotation("Relational:JsonPropertyName", "last_occurred_date");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "portfolio_id");

                    b.Property<string>("ViewerId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "viewer_id");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("PortfolioViews");

                    b.HasAnnotation("Relational:JsonPropertyName", "views");
                });

            modelBuilder.Entity("Portfi.Data.Models.Project", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<string>("Categories")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "categories");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "description");

                    b.Property<string>("HostedLink")
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "hosted_link");

                    b.Property<string>("Images")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "images");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "portfolio_id");

                    b.Property<string>("SourceCodeLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "source_code_link");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("Projects");

                    b.HasAnnotation("Relational:JsonPropertyName", "projects");
                });

            modelBuilder.Entity("Portfi.Data.Models.SocialMediaLink", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    b.Property<Guid>("PortfolioId")
                        .HasColumnType("uniqueidentifier")
                        .HasAnnotation("Relational:JsonPropertyName", "portfolio_id");

                    b.Property<int>("Type")
                        .HasColumnType("int")
                        .HasAnnotation("Relational:JsonPropertyName", "type");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasAnnotation("Relational:JsonPropertyName", "value");

                    b.HasKey("Id");

                    b.HasIndex("PortfolioId");

                    b.ToTable("SocialMediaLinks");

                    b.HasAnnotation("Relational:JsonPropertyName", "social_media_links");
                });

            modelBuilder.Entity("Portfi.Data.Models.Portfolio", b =>
                {
                    b.HasOne("Portfi.Data.Models.Portfolio", null)
                        .WithMany("PortfolioLinks")
                        .HasForeignKey("PortfolioId");
                });

            modelBuilder.Entity("Portfi.Data.Models.PortfolioDownload", b =>
                {
                    b.HasOne("Portfi.Data.Models.Portfolio", "Portfolio")
                        .WithMany("PortfolioDownloads")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfi.Data.Models.PortfolioLink", b =>
                {
                    b.HasOne("Portfi.Data.Models.Portfolio", "Portfolio")
                        .WithMany()
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfi.Data.Models.PortfolioView", b =>
                {
                    b.HasOne("Portfi.Data.Models.Portfolio", "Portfolio")
                        .WithMany("PortfolioViews")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfi.Data.Models.Project", b =>
                {
                    b.HasOne("Portfi.Data.Models.Portfolio", "Portfolio")
                        .WithMany("Projects")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfi.Data.Models.SocialMediaLink", b =>
                {
                    b.HasOne("Portfi.Data.Models.Portfolio", "Portfolio")
                        .WithMany("SocialMediaLinks")
                        .HasForeignKey("PortfolioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Portfolio");
                });

            modelBuilder.Entity("Portfi.Data.Models.Portfolio", b =>
                {
                    b.Navigation("PortfolioDownloads");

                    b.Navigation("PortfolioLinks");

                    b.Navigation("PortfolioViews");

                    b.Navigation("Projects");

                    b.Navigation("SocialMediaLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
